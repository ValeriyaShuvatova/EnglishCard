import random
import sqlite3
import os
import telebot
from psycopg2 import connect
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from database import (
    get_db_connection, initialize_db, check_user,
    fill_words,
    get_random_words, check_word_existence, add_word_to_user,
    delete_user_word)


"""–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
get_db_connection()

"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
initialize_db()


print('Start telegram bot...')




state_storage = StateMemoryStorage()
TOKEN = '8154783971:AAES0X7dPAXy2chPl1RCMlbBqI2ihQhEAUk'
bot = TeleBot(TOKEN, state_storage=state_storage, skip_pending=True)


# """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#
# check_user(user_id=bot.get_me().id, username=bot.get_me().username)

buttons = []
known_users = []

userStep = {}

def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

"""–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é —Å—Ç–µ–π—Ç–æ–≤. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª–∞—Å—Å StatesGroup –∏ —Å–æ–∑–¥–∞–µ–º –≤ –Ω–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥.–±. —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –∫–ª–∞—Å—Å–∞ State"""
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    other_words = State()
    adding_new_word = State() #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    saving_new_word = State() #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    deleting_word = State() #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞

def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


set_of_words = [
    ('Peace', '–ú–∏—Ä'), ('Green', '–ó–µ–ª—ë–Ω—ã–π'), ('White', '–ë–µ–ª—ã–π'),
    ('Hello', '–ü—Ä–∏–≤–µ—Ç'), ('Car', '–ú–∞—à–∏–Ω–∞'), ('Sky', '–ù–µ–±–æ'),
    ('Tree', '–î–µ—Ä–µ–≤–æ'), ('Book', '–ö–Ω–∏–≥–∞'), ('Love', '–õ—é–±–æ–≤—å'),
    ('Friend', '–î—Ä—É–≥')
]

fill_words(set_of_words)


@bot.message_handler(commands = ["start"])
def send_welcom(message):
    cid = message.chat.id
    username = message.chat.username
    user_id = message.from_user.id
    # if user_id not in known_users:
    #     known_users.append(user_id)
    #     userStep[user_id] = 0

    # username = message.from_user.username
    check_user(user_id, username)

    print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑...")
    print(cid)
    print(username)
    bot.send_message(cid, f"–ü—Ä–∏–≤–µ—Ç!"
                    f"–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n"
                    f"–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä,\n–∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
                    f"–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n"
                    f"- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï\n"
                    f"- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô\n"
                    f"–ù—É —á—Ç–æ, –Ω–∞—á–Ω–µ–º? –î–∞–ª—å—à–µ ‚è≠")


    create_cards(message) # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

def create_cards(message):
    cid = message.chat.id
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    global buttons
    buttons = []
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞
    words = get_random_words(cid, limit=4)
    print(f"–°–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞: {words}")

    if not words or len(words) < 4:
        bot.send_message(cid, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤!\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'.")
        print("–°–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    target_word, translate_word = words[0]
    print(f"–°–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ {target_word, translate_word}")
    other_words = [w[0] for w in words[1:]]


    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    options = other_words + [target_word]
    random.shuffle(options)

    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(row_width=2)  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (2 –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º)
    buttons = [types.KeyboardButton(option) for option in options]
    buttons.append(types.KeyboardButton(Command.NEXT))
    buttons.append(types.KeyboardButton(Command.ADD_WORD))
    buttons.append(types.KeyboardButton(Command.DELETE_WORD))
    markup.add(*buttons)  # —ç—Ç–æ —Å–ø–µ—Ü —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±–µ—Ä–µ—Ç —Ç–µ–∫—Å—Ç –∏ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.set_state(user_id=message.from_user.id, chat_id=cid, state=MyStates.target_word)
    with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word


    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate_word}"
    bot.send_message(cid, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word
        # data['other_words'] = others_words



"""–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
        types.KeyboardButton(Command.NEXT)
    ]
    markup.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)



@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"""
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word_start(message):
    cid = message.chat.id
    bot.set_state(user_id=message.from_user.id, chat_id=message.chat.id, state=MyStates.adding_new_word)
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")

"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
@bot.message_handler(state=MyStates.adding_new_word)
def add_translate_word(message):
    cid = message.chat.id
    word = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ
    if check_word_existence(word):
        bot.send_message(cid, "–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.")
        return

    # —ç—Ç–æ –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –±–æ—Ç–∞
    with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
        data['target_word'] = word
        bot.set_state(user_id=message.from_user.id, chat_id=cid, state=MyStates.saving_new_word)
        bot.register_next_step_handler(word)



    bot.send_message(cid, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{word}':")
    # save_new_word(message)

"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –ü–ï–†–ï–í–û–î –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""

def save_new_word(message):
    cid = message.chat.id
    translation = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not translation:
        bot.send_message(cid, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
            target_word = data.get('target_word').capitalize()

        if not target_word:
            bot.send_message(cid, "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Å /start.")
            bot.delete_state(user_id=message.from_user.id, chat_id=cid)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        add_word_to_user(message.from_user.id, target_word, translation)

        bot.send_message(cid, f"–°–ª–æ–≤–æ '{target_word}' –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ '{translation}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        bot.send_message(cid, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
    finally:
        bot.delete_state(user_id=message.from_user.id, chat_id=cid)

    # send_main_menu(cid)





"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"""
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word_start(message):
    bot.set_state(user_id=message.from_user.id, chat_id=message.chat.id, state=MyStates.deleting_word)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞:")

"""–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–Ω–µ–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –Ω–∞–ø–∏—Å–∞–ª —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
@bot.message_handler(state=MyStates.deleting_word)
def delete_word(message):
    word_to_delete = message.text.strip().capitalize()
    word_to_delete = delete_user_word(message.from_user.id, word_to_delete)

    if word_to_delete:
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete[0]}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è!")

    else:
        bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ.")

    bot.delete_state(user_id=message.from_user.id, chat_id=message.chat.id)

    send_main_menu(message.chat.id)


"""–æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
@bot.message_handler(func = lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                         f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)




bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling()# —ç—Ç–æ –º–µ—Ç–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
